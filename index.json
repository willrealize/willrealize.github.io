[{"categories":[],"content":" 无论是学习数据结构与算法或者其他知识点, 其要点精髓都在 Python之禅 里了 The Zen of Python Python之禅 by Tim Peters 作者: 蒂姆·皮特斯 Beautiful is better than ugly. 优美胜于丑陋 Explicit is better than implicit. 明了胜于晦涩 Simple is better than complex. 简洁胜于复杂 Complex is better than complicated. 复杂胜于凌乱 Flat is better than nested. 扁平胜于嵌套 Sparse is better than dense. 间隔胜于紧凑 Readability counts. 可读性很重要 Special cases aren’t special enough to break the rules. 即便假借特例的实用性之名 Although practicality beats purity. 也不可违背这些规则 Errors should never pass silently. 不要包容所有错误 Unless explicitly silenced. 除非你确定需要这样做 In the face of ambiguity, refuse the temptation to guess. 当存在多种可能, 不要尝试去猜测 There should be one– and preferably only one –obvious way to do it. 而是尽量找一种, 最好是唯一一种明显的解决方案 Although that way may not be obvious at first unless you’re Dutch. 虽然这并不容易, 因为你不是 Python 之父 Now is better than never. 做也许好过不做 Although never is often better than right now. 但不假思索就动手还不如不做 If the implementation is hard to explain, it’s a bad idea. 如果你难以向人描述你的方案, 那肯定不是一个好方案 If the implementation is easy to explain, it may be a good idea. 反之亦然 Namespaces are one honking great idea – let’s do more of those! 命名空间是一种绝妙的理念, 我们应当多加利用 ","date":"2021-11-23","objectID":"/1.%E6%A6%82%E8%BF%B0/:0:0","series":["数据结构与算法"],"tags":[],"title":"1. 前言","uri":"/1.%E6%A6%82%E8%BF%B0/#"},{"categories":[],"content":" def fun(li): min_num = li[0] for i in li: if i \u003c li[0]: min_num = i print(min_num) fun([1, 2, 5, 2, 3]) ","date":"2021-11-29","objectID":"/2.%E6%9F%A5%E6%89%BE%E6%9C%80%E5%B0%8F%E5%80%BC/:0:0","series":["数据结构与算法"],"tags":[],"title":"2. 查找最小值","uri":"/2.%E6%9F%A5%E6%89%BE%E6%9C%80%E5%B0%8F%E5%80%BC/#"},{"categories":[],"content":" # 使用二分法查找的前提是, 必须是有序列表 def func(li, n): left_index = 0 right_index = len(li) while left_index \u003c= right_index: mid_index = (left_index + right_index) // 2 if n == li[mid_index]: return mid_index if n \u003c li[mid_index]: right_index = mid_index - 1 else: left_index = mid_index + 1 else: return \"没有这个数\" print(func([1, 2, 54, 77, 88, 111, 231], 211)) ","date":"2021-11-29","objectID":"/3.%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE/:0:0","series":["数据结构与算法"],"tags":[],"title":"3. 二分法查找","uri":"/3.%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE/#"},{"categories":[],"content":" def func(li): flag = False # 在循环之前作个标记 for j in range(len(li)-1): for i in range(len(li)-1-j): if li[i] \u003e li[i+1]: flag = True # 如果进入到这个条件, 说明是无序的, 如果没有进入, 代表是有序的 li[i], li[i+1] = li[i+1], li[i] if flag is False: # 如果是有序的直接break break a = [1, 2, 3, 4, 5] func(a) print(a) ","date":"2021-11-29","objectID":"/4.%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"4. 冒泡排序","uri":"/4.%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" def func(li): for j in range(len(li)-1): max_index = 0 # 每一轮都假设列表中的第一个元素是最大的 for i in range(len(li)-j): if li[i] \u003e li[max_index]: max_index = i # 把最大的数放在列表最后一位, 减j代表有序区就不用再排序了 li[len(li)-1-j], li[max_index] = li[max_index], li[len(li)-1-j] a = [31, 12, 2, 5, 1, 8] func(a) print(a) ","date":"2021-11-29","objectID":"/5.%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"5. 选择排序","uri":"/5.%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" def func(li): for i in range(1, len(li)): # 从第二轮开始, 也是从第二个元素跟第一个开始比 while i \u003e 0: if li[i] \u003c li[i-1]: # 当前元素比上一个元素小就换位置 li[i], li[i-1] = li[i-1], li[i] else: # 列表的前面为有序区, 如果当前元素比有序区的最大值还大, 就没必要继续了 break i -= 1 # 当无序区有元素插进来, 会依次根前面的比, 直到在有序区找到合适的位置 a = [55, 11, 2, 3, 1, 15] func(a) print(a) ","date":"2021-11-29","objectID":"/6.%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"6. 插入排序","uri":"/6.%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" import random def func(li): if len(li) \u003c= 1: # 把列表一直分到一个元素为止 return li n = li[0] # 取第一个数作为比较 left = [i for i in li[1:] if i \u003c= n] # 比第一个数小的放左边 right = [j for j in li[1:] if j \u003e n] # 比第一个数大的放右边 return func(left) + [n] + func(right) # 递归到列表元素个数为1, 再合并返回 a = [k for k in range(33)] random.shuffle(a) print(func(a)) ","date":"2021-11-29","objectID":"/7.%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"7. 快速排序","uri":"/7.%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" def sift(li, low, high): # 用来做筛选 \"\"\" :param li: 构建堆的列表 :param low: 堆的根节点(也就是堆顶)的索引 :param high: 堆的最后一个节点的索引 :return: 直接对列表操作, 不需要返回值 \"\"\" # 使用parent和child两个变量分别指向父节点和子节点 parent = low # parent最开始指向根节点 child = 2 * parent + 1 # child开始指向左子节点 while child \u003c= high: if child + 1 \u003c= high and li[child] \u003c li[child + 1]: child = child + 1 if li[child] \u003e li[parent]: li[child], li[parent] = li[parent], li[child] parent = child child = 2 * parent + 1 else: break def heap_sort(li): # 第一步: 构建堆 n = len(li) for low in range((n - 2) // 2, -1, -1): # low一开始指向最后一个父节点 sift(li, low, n - 1) print('构造的堆: ', li) # 第二步: 排序 for high in range(n - 1, -1, -1): li[0], li[high] = li[high], li[0] sift(li, 0, high - 1) a = [9, 18, 7, 6, 15, 4, 23, 2, 1] heap_sort(a) print(a) ","date":"2021-12-31","objectID":"/8.%E5%A0%86%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"8. 堆排序","uri":"/8.%E5%A0%86%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" import random def func(li): if len(li) \u003c= 1: return li mid = len(li) // 2 left = func(li[0:mid]) right = func(li[mid:]) result = [] while left and right: if left[0] \u003c= right[0]: result.append(left.pop(0)) else: result.append(right.pop(0)) result.extend(left), result.extend(right) return result a = [i for i in range(111)] random.shuffle(a) print(func(a)) 使用索引的方法 import random def func(li): if len(li) \u003c= 1: return li mid = len(li) // 2 left = func(li[0:mid]) right = func(li[mid:]) result = [] left_index, right_index = 0, 0 while left_index \u003c len(left) and right_index \u003c len(right): if left[left_index] \u003c= right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 result.extend(left[left_index:]), result.extend(right[right_index:]) return result a = [i for i in range(111)] random.shuffle(a) print(func(a)) 然而上面两种方法都不是太好, 因为都要开辟新的空间, 推荐下面写法 import random def func(li): # 有返回值的写法 if len(li) \u003c= 1: return li mid = len(li) // 2 left = func(li[:mid]) # 有返回值的话, 要用变量接收 right = func(li[mid:]) left_index = 0 right_index = 0 li_index = 0 while left_index \u003c len(left) and right_index \u003c len(right): if left[left_index] \u003c right[right_index]: li[li_index] = left[left_index] left_index += 1 else: li[li_index] = right[right_index] right_index += 1 li_index += 1 while left_index \u003c len(left): li[li_index] = left[left_index] left_index += 1 li_index += 1 while right_index \u003c len(right): li[li_index] = right[right_index] right_index += 1 li_index += 1 return li a = [i for i in range(22)] random.shuffle(a) print(func(a)) import random def func(li): # 无返回值的写法 if len(li) \u003e 1: mid = len(li) // 2 left, right = li[:mid], li[mid:] func(left), func(right) left_index, right_index, li_index = 0, 0, 0 while left_index \u003c len(left) and right_index \u003c len(right): if left[left_index] \u003c right[right_index]: li[li_index] = left[left_index] left_index += 1 else: li[li_index] = right[right_index] right_index += 1 li_index += 1 while left_index \u003c len(left): li[li_index] = left[left_index] left_index += 1 li_index += 1 while right_index \u003c len(right): li[li_index] = right[right_index] right_index += 1 li_index += 1 a = [i for i in range(22)] random.shuffle(a) func(a) print(a) ","date":"2021-12-31","objectID":"/9.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"9. 归并排序","uri":"/9.%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" import random def func(li): temp = [0 for _ in range(max(li)+1)] for i in li: temp[i] += 1 li.clear() for index, value in enumerate(temp): for j in range(value): li.append(index) print(li) a = [random.randint(0, 100) for _ in range(100)] func(a) ","date":"2021-12-31","objectID":"/10.%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/:0:0","series":["数据结构与算法"],"tags":[],"title":"10. 计数排序","uri":"/10.%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/#"},{"categories":[],"content":" class Stack: def __init__(self): self.li = [] # 压栈 def push(self, item): self.li.append(item) # 出栈 def pop(self): return self.li.pop() # 查看栈顶元素 def peek(self): return self.li[-1] # 判断是否为空 def is_empty(self): return self.li == [] # 查看栈的大小 def size(self): return len(self.li) if __name__ == \"__main__\": stack = Stack() stack.push(1) stack.pop() ","date":"2021-12-31","objectID":"/11.%E6%A0%88/:0:0","series":["数据结构与算法"],"tags":[],"title":"11. 栈","uri":"/11.%E6%A0%88/#"},{"categories":[],"content":" class Queue: # 队列 def __init__(self): self.li = [] # 进队 def enqueue(self, item): self.li.append(item) # 如果频繁进, 用: append+pop(0) # self.li.insert(0, item) # 如果频繁出, 用: insert(0, item)+pop() # 出队 def dequeue(self): self.li.pop(0) # self.li.pop() def is_empty(self): return self.li == [] def size(self): return len(self.li) if __name__ == '__main__': queue = Queue() class CircularQueue: # 环形队列 def __init__(self, size=100): self.size = size self.queue = [0 for _ in range(size)] self.rear = 0 # 队尾指针 self.front = 0 # 队首指针 def push(self, element): if not self.is_filled(): self.rear = (self.rear + 1) % self.size self.queue[self.rear] = element else: raise IndexError(\"Queue is filled\") def pop(self): if not self.is_empty(): self.front = (self.front + 1) % self.size return self.queue[self.front] else: raise IndexError(\"Queue is empty\") def is_empty(self): return self.rear == self.front def is_filled(self): return (self.rear + 1) % self.size == self.front if __name__ == '__main__': queue = CircularQueue(5) queue.push(1) print(queue.queue) Python内置队列模块deque from collections import deque # 可以不传参数, 默认为一个空队列 q1 = deque() # 下面两组是成对使用 q1.append(1) q1.popleft() q1.appendleft(1) q1.pop() # 可以传一个列表, 和限定队列长度 q2 = deque([1, 2, 3], 3) q2.append(1) print(q2) # [2, 3, 1] 如果队列中的元素已经满了, 会自动弹出 内置模块deque的实际应用 from collections import deque # 可以使用deque实现tail的功能 def tail(n): with open('xxx.txt', 'r') as f: q = deque(f, n) return q for line in tail(5): print(line, end='') ","date":"2021-12-31","objectID":"/12.%E9%98%9F%E5%88%97/:0:0","series":["数据结构与算法"],"tags":[],"title":"12. 队列","uri":"/12.%E9%98%9F%E5%88%97/#"},{"categories":[],"content":" class Node: def __init__(self, data): self.data = data self.next = None class SingleLinkedList: def __init__(self, data=None): if data is None: self.head = data else: self.head = Node(data) def add(self, item): # 在链表头部插入 new_node = Node(item) new_node.next = self.head self.head = new_node def append(self, item): # 在链表尾部插入 new_node = Node(item) if self.head is None: self.head = new_node else: current_node = self.head while current_node.next: current_node = current_node.next current_node.next = new_node def insert(self, pos, item): # 任意位置插入 pos = self.func(pos) if pos == 0: self.add(item) elif pos \u003e= self.length(): self.append(item) else: new_node = Node(item) index = 0 pre_node = self.head while index \u003c pos - 1: pre_node = pre_node.next index += 1 new_node.next = pre_node.next pre_node.next = new_node def remove(self, pos): # 删除指定位置元素 pos = self.func(pos) if pos \u003e= self.length(): pos = self.length() - 1 if pos == 0: self.head = self.head.next else: pre_node = None current_node = self.head index = 0 while index \u003c pos: pre_node = current_node current_node = current_node.next index += 1 if pos == self.length() - 1: pre_node.next = None else: pre_node.next = current_node.next def update(self, pos, item): # 更新指定位置元素 pos = self.func(pos) if pos \u003e= self.length(): pos = self.length() - 1 current_node = self.head index = 0 while index \u003c pos: current_node = current_node.next index += 1 current_node.data = item def length(self): # 查看链表的长度 length = 0 current_node = self.head while current_node: current_node = current_node.next length += 1 return length def travel(self): # 遍历链表 current_node = self.head while current_node: print(current_node.data, end=' ') current_node = current_node.next def search(self, item): # 搜索元素在链表中的位置 current_node = self.head index = 0 index_li = [] while current_node: if current_node.data == item: index_li.append(index) current_node = current_node.next index += 1 if len(index_li) \u003e 0: print('元素在链表中的索引为: %s' % index_li) else: print('没有这个元素') def func(self, pos): # 这个函数是为了支持负索引 if pos \u003c 0: if -pos \u003c= self.length(): # 把负索引转为正索引 pos = self.length() + pos else: # 如果负索引超过总长, 就把索引置为0 pos = 0 return pos # 创建一个空链表链表 linked_list = SingleLinkedList() # 在链表头部插入一个元素 linked_list.add(1) # 在链表尾部插入一个元素 linked_list.append(2) # 在链表任意一个位置插入一个元素 linked_list.insert(32, 3) # 删除指定位置元素 linked_list.remove(33) # 更新指定位置元素 linked_list.update(22, 11) # 搜索元素在链表中出现的位置 linked_list.search(1) # 遍历链表 linked_list.travel() ","date":"2022-01-03","objectID":"/13.%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/:0:0","series":["数据结构与算法"],"tags":[],"title":"13. 单向链表","uri":"/13.%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/#"},{"categories":[],"content":" class Node: def __init__(self, data): self.data = data self.pre = None self.next = None class DoubleLinkedList: def __init__(self, node=None): if node is None: self.head = None else: self.head = Node(node) def add(self, item): # 在链表头部添加元素 new_node = Node(item) if self.head is None: self.head = new_node else: new_node.next = self.head self.head.pre = new_node self.head = new_node def append(self, item): # 在链表尾部添加元素 new_node = Node(item) if self.head is None: self.head = new_node else: current_node = self.head while current_node.next: current_node = current_node.next current_node.next = new_node new_node.pre = current_node def insert(self, pos, item): pos = self.func(pos) if pos == 0: self.add(item) elif pos \u003e= self.length(): self.append(item) else: new_node = Node(item) current_node = self.current_node(pos) new_node.pre = current_node.pre # 从一个节点前面插入新节点, 要先连新节点和当前节点前面的节点 current_node.pre.next = new_node new_node.next = current_node current_node.pre = new_node def remove(self, pos): pos = self.func(pos) if pos \u003e= self.length(): pos = self.length() - 1 current_node = self.current_node(pos) if pos == 0: self.head = self.head.next elif pos == self.length() - 1: current_node.pre.next = None else: current_node.next.pre = current_node.pre current_node.pre.next = current_node.next def update(self, pos, item): pos = self.func(pos) if pos \u003e= self.length(): pos = self.length() - 1 current_node = self.current_node(pos) current_node.data = item def length(self): # 查看链表长度 length = 0 current_node = self.head while current_node: current_node = current_node.next length += 1 return length def travel(self): # 遍历链表 current_node = self.head while current_node: print(current_node.data, end=' ') current_node = current_node.next def current_node(self, pos): current_node = self.head index = 0 while index \u003c pos: current_node = current_node.next index += 1 return current_node def func(self, pos): # 这个函数是为了支持负索引 if pos \u003c 0: if -pos \u003c= self.length(): # 把负索引转为正索引 pos = self.length() + pos else: # 如果负索引超过总长, 就把索引置为0 pos = 0 return pos db_linked_list = DoubleLinkedList() db_linked_list.add(1) db_linked_list.append(2) db_linked_list.insert(1, 11) db_linked_list.remove(1) db_linked_list.update(1, 33) db_linked_list.travel() ","date":"2022-01-03","objectID":"/14.%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/:0:0","series":["数据结构与算法"],"tags":[],"title":"14. 双向链表","uri":"/14.%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/#"},{"categories":[],"content":" class Node: def __init__(self, data): self.data = data self.left_child = None self.right_child = None class Tree: def __init__(self): self.root = None def add(self, item): # 添加节点 new_node = Node(item) if self.root is None: self.root = new_node return queue = [self.root] while queue: current_node = queue.pop(0) if current_node.left_child is None: current_node.left_child = new_node return else: queue.append(current_node.left_child) if current_node.right_child is None: current_node.right_child = new_node return else: queue.append(current_node.right_child) def breadth_first_search(self): if self.root is None: return queue = [self.root] while queue: current_node = queue.pop(0) print(current_node.data, end=' ') if current_node.left_child: queue.append(current_node.left_child) if current_node.right_child: queue.append(current_node.right_child) def depth_first_search_pre_order(self, node): # 先(根)序遍历 if node is None: return print(node.data, end=' ') self.depth_first_search_pre_order(node.left_child) self.depth_first_search_pre_order(node.right_child) def depth_first_search_in_order(self, node): # 中(根)序遍历 if node is None: return self.depth_first_search_in_order(node.left_child) print(node.data, end=' ') self.depth_first_search_in_order(node.right_child) def depth_first_search_post_order(self, node): # 后(根)序遍历 if node is None: return self.depth_first_search_post_order(node.left_child) self.depth_first_search_post_order(node.right_child) print(node.data, end=' ') if __name__ == '__main__': tree = Tree() for i in range(5): tree.add(i) tree.breadth_first_search() print() tree.depth_first_search_pre_order(tree.root) print() tree.depth_first_search_in_order(tree.root) print() tree.depth_first_search_post_order(tree.root) ","date":"2022-01-04","objectID":"/15.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/:0:0","series":["数据结构与算法"],"tags":[],"title":"15. 完全二叉树","uri":"/15.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/#"},{"categories":["Documentation"],"content":"最近服务器一直被SSH暴力破解, 就搜索了有关服务器防暴力破解的方法, DenyHosts是一个使用Python写的程序，它会分析sshd的日志文件/var/log/auth.log, 当发现重复的攻击时就会把IP记录到/etc/hosts.deny文件中，从而屏蔽恶意攻击者的IP ","date":"2022-01-06","objectID":"/7.%E9%98%B2ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/:0:0","series":[],"tags":["ubuntu"],"title":"使用文档 - 使用Denyhosts防SSH暴力破解","uri":"/7.%E9%98%B2ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/#"},{"categories":["Documentation"],"content":"安装 这里使用的系统是Ubuntu18.04 sudo apt install denyhosts DenyHosts配置文件的路径: /etc/denyhosts.conf DenyHosts日志文件的路径: /var/log/denyhosts DenyHosts监控的文件(ssh日志文件)的路径: /var/log/auth.log ","date":"2022-01-06","objectID":"/7.%E9%98%B2ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/:0:1","series":[],"tags":["ubuntu"],"title":"使用文档 - 使用Denyhosts防SSH暴力破解","uri":"/7.%E9%98%B2ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/#安装"},{"categories":["Documentation"],"content":"配置 sudo vim /etc/denyhosts.conf 下面是各项配置的中文说明, 使用默认配置也行, 也可以根据需要进行修改 SECURE_LOG = /var/log/auth.log # ssh日志文件, denyhosts基于此日志内容来判断 HOSTS_DENY = /etc/hosts.deny # 控制用户登陆文件 PURGE_DENY = 4w # 过多久后清除已经禁止的IP, 空表示永远不解禁 BLOCK_SERVICE = ALL # 禁止的服务名, 如还要添加其他服务, 只需添加逗号跟上相应的服务即可，写个sshd也可以 DENY_THRESHOLD_INVALID = 5 # 允许无效用户失败的次数 DENY_THRESHOLD_VALID = 15 # 允许普通用户登陆失败的次数 DENY_THRESHOLD_ROOT = 5 # 允许root登陆失败的次数 DENY_THRESHOLD_RESTRICTED = 1 WORK_DIR = /var/lib/denyhosts # denyhosts运行目录 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS = YES HOSTNAME_LOOKUP = YES # 是否进行域名反解析 LOCK_FILE = /run/denyhosts.pid # 程序的进程ID ADMIN_EMAIL = root@localhost # 管理员邮件地址, 可设置告警邮箱 SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts \u003cnobody@localhost\u003e SMTP_SUBJECT = DenyHosts Report AGE_RESET_VALID = 5d # 用户的登录失败计数会在多久以后重置为0 (h: 小时, d: 天, m: 月, w: 周, y: 年) AGE_RESET_ROOT = 25d AGE_RESET_RESTRICTED = 25d AGE_RESET_INVALID = 10d RESET_ON_SUCCESS = yes # 如果一个ip登陆成功后, 失败的登陆计数是否重置为0 DAEMON_LOG = /var/log/denyhosts # denyhosts的日志文件 DAEMON_SLEEP = 60s # 当以后台方式运行时, 每读一次日志文件的时间间隔 DAEMON_PURGE = 1h # 当以后台方式运行时, 清除机制在 HOSTS_DENY 中终止旧条目的时间间隔, 这个会影响PURGE_DENY的间隔 有关指令 sudo service denyhosts start sudo service denyhosts restart sudo service denyhosts stop # 与下面指令相同 sudo /etc/init.d/denyhosts start|stop|restart|force-reload|status # 也可以使用下面指令 sudo systemctl start denyhosts sudo systemctl restart denyhosts sudo systemctl stop denyhosts 参照文档: 使用DenyHosts防SSH暴力破解 ","date":"2022-01-06","objectID":"/7.%E9%98%B2ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/:0:2","series":[],"tags":["ubuntu"],"title":"使用文档 - 使用Denyhosts防SSH暴力破解","uri":"/7.%E9%98%B2ssh%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/#配置"},{"categories":["Documentation"],"content":"使用Typora+PicGo+Gitee搭建舒适便捷的个人写作环境 ","date":"2021-12-01","objectID":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/:0:0","series":[],"tags":["gitee","PicGo","Typora"],"title":"使用文档 - 配置Typora中的图片上传功能","uri":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/#"},{"categories":["Documentation"],"content":"安装PicGo 打开 Typora 依次点击: 文件–\u003e偏好设置–\u003e图像, 进入到下图界面 p1\"\rp1\r 点击上传服务后面的下拉框, 选择 PicGo(app) 选项, 然后点击下面的 下载PicGo(app) 按钮, 跳转到下载页面 p2\"\rp2\r 点击免费下载会跳到 GitHub, 如下图, 下拉到 Assets, 选择你需要的版本下载, 然后安装 p3\"\rp3\r ","date":"2021-12-01","objectID":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/:0:1","series":[],"tags":["gitee","PicGo","Typora"],"title":"使用文档 - 配置Typora中的图片上传功能","uri":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/#安装picgo"},{"categories":["Documentation"],"content":"安装插件 打开 PicGo, 点击插件设置, 搜索 gitee, 点击安装, 这时会提示安装 NodeJS, 根据提示下载, 安装后重启 PicGo, 再点击安装 p4\"\rp4\r 这时就能在图床设置中看到Gitee图床 p5\"\rp5\r ","date":"2021-12-01","objectID":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/:0:2","series":[],"tags":["gitee","PicGo","Typora"],"title":"使用文档 - 配置Typora中的图片上传功能","uri":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/#安装插件"},{"categories":["Documentation"],"content":"建立连接 进入 Gitee 新建一个专门存储图片的仓库, 用户名和仓库名就是要填入PicGo 中的 p6\"\rp6\r 创建私人令牌, 依次点击右上角头像–\u003e设置, 然后点击左边的私人令牌 p7\"\rp7\r 进入下图页面 p8\"\rp8\r 点击生成新令牌后进入下图页面, 如图选择权限, 输入描述信息后点击提交 p9\"\rp9\r 生成新令牌后立即复制保存, 令牌不会再明文显示在平台上 p10\"\rp10\r 打开 PicGo, 如下图填写, 点击设为默认图床 p11\"\rp11\r ","date":"2021-12-01","objectID":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/:0:3","series":[],"tags":["gitee","PicGo","Typora"],"title":"使用文档 - 配置Typora中的图片上传功能","uri":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/#建立连接"},{"categories":["Documentation"],"content":"上传图片 先设置一下 PicGo, 根据自己的习惯设置 p12\"\rp12\r 打开 Typora, 把图片拖进 Typora 时会有提示框, 在上传图片之前可以先设置一下要上传到哪个目录 p13\"\rp13\r 设置上传到哪个目录: 打开 Picgo, 把下图的 path 改成你想存放的目录, 然后点击确定 p14\"\rp14\r 然后在 Typora 中右击图片, 点击上传图片 p15\"\rp15\r 弹出重命名图片的窗口, 重命名后点击确定 p16\"\rp16\r 这个时候你就可以在 Gitee 中的仓库中看到图片了 p17\"\rp17\r","date":"2021-12-01","objectID":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/:0:4","series":[],"tags":["gitee","PicGo","Typora"],"title":"使用文档 - 配置Typora中的图片上传功能","uri":"/6.%E9%85%8D%E7%BD%AEtypora%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/#上传图片"},{"categories":["Documentation"],"content":"搭建属于自己的git服务器, 不用推送到GitHub或者Gitee ","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:0","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#"},{"categories":["Documentation"],"content":"Windows版 下载 官网: https://dl.gitea.io/ GitHub: https://github.com/go-gitea/gitea/releases 根据自己的系统下载, 这里选择的版本: gitea-1.15.6-windows-4.0-amd64.exe 下载好以后把文件名改为 gitea.exe 注册为Windows服务 在你想要的地方创建一个 Gitea 目录, 用来存放 gitea.exe 要注册为Windows服务，首先以 Administrator 身份运行 cmd，然后执行以下命令 # 下面为命令格式 sc create gitea start= auto binPath= \"\\\"你gitea.exe的路径\\\" web --config \\\"你Gitea目录的路径\\custom\\conf\\app.ini\\\"\" # 比如, 下面是我的路径, 我是把 gitea.exe 放在了 C:\\All\\IT\\Gitea 目录下 sc create gitea start= auto binPath= \"\\\"C:\\All\\IT\\Gitea\\gitea.exe\\\" web --config \\\"C:\\All\\IT\\Gitea\\custom\\conf\\app.ini\\\"\" 运行 Windows+R 调出运行界面, 输入 services.msc 回车跳到服务窗口, 找到 gitea，右键启动 在浏览器打开 http://localhost:3000 就可以访问了, 如果你修改了端口，请访问对应的端口，3000是默认端口 提示 Windows版本推荐使用SQLite 删除 先删除Windows服务, 以 Administrator 身份运行 cmd, 执行以下命令, 然后删除 gitea.exe sc delete gitea ","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:1","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#windows版"},{"categories":["Documentation"],"content":"Windows版 下载 官网: https://dl.gitea.io/ GitHub: https://github.com/go-gitea/gitea/releases 根据自己的系统下载, 这里选择的版本: gitea-1.15.6-windows-4.0-amd64.exe 下载好以后把文件名改为 gitea.exe 注册为Windows服务 在你想要的地方创建一个 Gitea 目录, 用来存放 gitea.exe 要注册为Windows服务，首先以 Administrator 身份运行 cmd，然后执行以下命令 # 下面为命令格式 sc create gitea start= auto binPath= \"\\\"你gitea.exe的路径\\\" web --config \\\"你Gitea目录的路径\\custom\\conf\\app.ini\\\"\" # 比如, 下面是我的路径, 我是把 gitea.exe 放在了 C:\\All\\IT\\Gitea 目录下 sc create gitea start= auto binPath= \"\\\"C:\\All\\IT\\Gitea\\gitea.exe\\\" web --config \\\"C:\\All\\IT\\Gitea\\custom\\conf\\app.ini\\\"\" 运行 Windows+R 调出运行界面, 输入 services.msc 回车跳到服务窗口, 找到 gitea，右键启动 在浏览器打开 http://localhost:3000 就可以访问了, 如果你修改了端口，请访问对应的端口，3000是默认端口 提示 Windows版本推荐使用SQLite 删除 先删除Windows服务, 以 Administrator 身份运行 cmd, 执行以下命令, 然后删除 gitea.exe sc delete gitea ","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:1","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#下载"},{"categories":["Documentation"],"content":"Windows版 下载 官网: https://dl.gitea.io/ GitHub: https://github.com/go-gitea/gitea/releases 根据自己的系统下载, 这里选择的版本: gitea-1.15.6-windows-4.0-amd64.exe 下载好以后把文件名改为 gitea.exe 注册为Windows服务 在你想要的地方创建一个 Gitea 目录, 用来存放 gitea.exe 要注册为Windows服务，首先以 Administrator 身份运行 cmd，然后执行以下命令 # 下面为命令格式 sc create gitea start= auto binPath= \"\\\"你gitea.exe的路径\\\" web --config \\\"你Gitea目录的路径\\custom\\conf\\app.ini\\\"\" # 比如, 下面是我的路径, 我是把 gitea.exe 放在了 C:\\All\\IT\\Gitea 目录下 sc create gitea start= auto binPath= \"\\\"C:\\All\\IT\\Gitea\\gitea.exe\\\" web --config \\\"C:\\All\\IT\\Gitea\\custom\\conf\\app.ini\\\"\" 运行 Windows+R 调出运行界面, 输入 services.msc 回车跳到服务窗口, 找到 gitea，右键启动 在浏览器打开 http://localhost:3000 就可以访问了, 如果你修改了端口，请访问对应的端口，3000是默认端口 提示 Windows版本推荐使用SQLite 删除 先删除Windows服务, 以 Administrator 身份运行 cmd, 执行以下命令, 然后删除 gitea.exe sc delete gitea ","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:1","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#注册为windows服务"},{"categories":["Documentation"],"content":"Windows版 下载 官网: https://dl.gitea.io/ GitHub: https://github.com/go-gitea/gitea/releases 根据自己的系统下载, 这里选择的版本: gitea-1.15.6-windows-4.0-amd64.exe 下载好以后把文件名改为 gitea.exe 注册为Windows服务 在你想要的地方创建一个 Gitea 目录, 用来存放 gitea.exe 要注册为Windows服务，首先以 Administrator 身份运行 cmd，然后执行以下命令 # 下面为命令格式 sc create gitea start= auto binPath= \"\\\"你gitea.exe的路径\\\" web --config \\\"你Gitea目录的路径\\custom\\conf\\app.ini\\\"\" # 比如, 下面是我的路径, 我是把 gitea.exe 放在了 C:\\All\\IT\\Gitea 目录下 sc create gitea start= auto binPath= \"\\\"C:\\All\\IT\\Gitea\\gitea.exe\\\" web --config \\\"C:\\All\\IT\\Gitea\\custom\\conf\\app.ini\\\"\" 运行 Windows+R 调出运行界面, 输入 services.msc 回车跳到服务窗口, 找到 gitea，右键启动 在浏览器打开 http://localhost:3000 就可以访问了, 如果你修改了端口，请访问对应的端口，3000是默认端口 提示 Windows版本推荐使用SQLite 删除 先删除Windows服务, 以 Administrator 身份运行 cmd, 执行以下命令, 然后删除 gitea.exe sc delete gitea ","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:1","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#运行"},{"categories":["Documentation"],"content":"Windows版 下载 官网: https://dl.gitea.io/ GitHub: https://github.com/go-gitea/gitea/releases 根据自己的系统下载, 这里选择的版本: gitea-1.15.6-windows-4.0-amd64.exe 下载好以后把文件名改为 gitea.exe 注册为Windows服务 在你想要的地方创建一个 Gitea 目录, 用来存放 gitea.exe 要注册为Windows服务，首先以 Administrator 身份运行 cmd，然后执行以下命令 # 下面为命令格式 sc create gitea start= auto binPath= \"\\\"你gitea.exe的路径\\\" web --config \\\"你Gitea目录的路径\\custom\\conf\\app.ini\\\"\" # 比如, 下面是我的路径, 我是把 gitea.exe 放在了 C:\\All\\IT\\Gitea 目录下 sc create gitea start= auto binPath= \"\\\"C:\\All\\IT\\Gitea\\gitea.exe\\\" web --config \\\"C:\\All\\IT\\Gitea\\custom\\conf\\app.ini\\\"\" 运行 Windows+R 调出运行界面, 输入 services.msc 回车跳到服务窗口, 找到 gitea，右键启动 在浏览器打开 http://localhost:3000 就可以访问了, 如果你修改了端口，请访问对应的端口，3000是默认端口 提示 Windows版本推荐使用SQLite 删除 先删除Windows服务, 以 Administrator 身份运行 cmd, 执行以下命令, 然后删除 gitea.exe sc delete gitea ","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:1","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#删除"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream=\u003csome_port\u003e ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#ubuntu版"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#服务启动版"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#创建-mysql-用户"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#安装gitea"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#修改配置"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#docker-compose版"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#安装docker-compose"},{"categories":["Documentation"],"content":"Ubuntu版 服务启动版 参考文档: https://docs.gitea.io/en-us/install-from-binary/ 系统版本: ubuntu 18.04 gitea版本: gitea-1.15.6-linux-amd64 MySQL版本: MySQL 8.0 提示 如果没有安装MySQL, 请跳过 创建 MySQL用户 这些步骤 创建 MySQL 用户 登录数据库 mysql -uroot -p # 输入密码 创建gitea用户 SETold_passwords=0;# MySQL8.0不用执行这一句 CREATEUSER'gitea'IDENTIFIEDBY'你想设置的密码'; 创建gitea数据库, 这里采用utf8mb4而不是utf8作为字符集, 是因为utf8mb4支持的Unicode字符更多 CREATEDATABASEgiteaCHARACTERSET'utf8mb4'COLLATE'utf8mb4_unicode_ci'; 给gitea用户赋予数据库的权限, 刷新并退出 GRANTALLPRIVILEGESONgitea.*TO'gitea';FLUSHPRIVILEGES;exit 测试数据库连接 mysql -ugitea -p # 输入密码 提示 这里的用户名, 密码, 数据库名等下会在创建站点时用到 安装gitea 以下操作全在 root 用户下执行 cd # 此时应该在当前用户目录下 su # 输入密码后, 不要再进入其他目录了 下载 gitea 使用wget下载gitea二进制文件, 可以到官网或github下载 wget -O gitea https://dl.gitea.io/gitea/1.15.6/gitea-1.15.6-linux-amd64 # 下载完成后给文件赋予权限 chmod +x gitea # 将 gitea 二进制文件移动到指定路径 mv gitea-1.15.6-linux-amd64 /usr/local/bin/gitea 准备环境 检查服务器上是否安装了 Git, 如果不是, 请先安装它 git --version 创建用户 git 用来运行 gitea # 添加一个名为 git 的用户 adduser \\ --system \\ --shell /bin/bash \\ --gecos 'Git Version Control' \\ --group \\ --disabled-password \\ --home /home/git \\ git 创建所需的目录结构 mkdir -p /var/lib/gitea/{custom,data,log} chown -R git:git /var/lib/gitea/ chmod -R 750 /var/lib/gitea/ mkdir /etc/gitea chown root:git /etc/gitea chmod 770 /etc/gitea 注意 为了git这个用户, 暂时的把目录/etc/gitea设置了写权限, 以便安装的时候程序可以写入配置文件, 安装完成后, 建议使用以下方法将权限设置为只读, 下面两句指令暂时不执行 chmod 750 /etc/gitea chmod 640 /etc/gitea/app.ini 运行 gitea 这里采用官方推荐的方法, 通过创建一个服务文件来自动启动 gitea, 在 /etc/systemd/system 目录下创建一个名为 gitea.service 的文件 vim /etc/systemd/system/gitea.service 将以下内容复制到 gitea.service 中，本文采用的是MySQL数据库, 需要把MySQL的注释打开，如果采用其他的数据库, 可以打开相关配置的注释, 并将MySQL的配置注释了 [Unit] Description=Gitea (Git with a cup of tea) After=syslog.target After=network.target ### # Don't forget to add the database service dependencies ### # Wants=mysql.service After=mysql.service # #Wants=mariadb.service #After=mariadb.service # #Wants=postgresql.service #After=postgresql.service # #Wants=memcached.service #After=memcached.service # #Wants=redis.service #After=redis.service # ### # If using socket activation for main http/s ### # #After=gitea.main.socket #Requires=gitea.main.socket # ### # (You can also provide gitea an http fallback and/or ssh socket too) # # An example of /etc/systemd/system/gitea.main.socket ### ## ## [Unit] ## Description=Gitea Web Socket ## PartOf=gitea.service ## ## [Socket] ## Service=gitea.service ## ListenStream= ## NoDelay=true ## ## [Install] ## WantedBy=sockets.target ## ### [Service] # Modify these two values and uncomment them if you have # repos with lots of files and get an HTTP error 500 because # of that ### #LimitMEMLOCK=infinity #LimitNOFILE=65535 RestartSec=2s Type=simple User=git Group=git WorkingDirectory=/var/lib/gitea/ # If using Unix socket: tells systemd to create the /run/gitea folder, which will contain the gitea.sock file # (manually creating /run/gitea doesn't work, because it would not persist across reboots) #RuntimeDirectory=gitea ExecStart=/usr/local/bin/gitea web --config /etc/gitea/app.ini Restart=always Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea # If you install Git to directory prefix other than default PATH (which happens # for example if you install other versions of Git side-to-side with # distribution version), uncomment below line and add that prefix to PATH # Don't forget to place git-lfs binary on the PATH below if you want to enable # Git LFS support #Environment=PATH=/path/to/git/bin:/bin:/sbin:/usr/bin:/usr/sbin # If you want to bind Gitea to a port below 1024, uncomment # the two values below, or use socket activation to pass Gitea its ports as above ### #CapabilityBoundingSet=CAP_NET_BIND_SERVICE #AmbientCapabilities=CAP_NET_BIND_SERVICE ### [Install] WantedBy=multi-user.target 启动gitea服务 systemctl enable gitea systemctl start gitea 安装界面 打开浏览器访问页面: http://你的服务器ip:3000/, 此时进入 gitea 的安装页面, 首先需要设置 开始是数据库设置, 填入上面创建的MySQL用户, 密码和数据库名, 如果没安装MySQL就选择SQLite3 提示 如果只在本地使用, 数据库主机不用修改 然后是一般设置, 站点名称可以根据自己的需要修改, 如果只在本机使用, 其他选项不要改","date":"2021-11-20","objectID":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:2","series":null,"tags":["gitea","ubuntu","windows"],"title":"使用文档 - 使用gitea搭建git服务器","uri":"/3.%E4%BD%BF%E7%94%A8gitea%E6%90%AD%E5%BB%BAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/#安装gitea-1"},{"categories":["Documentation"],"content":"体验一下Halo博客系统, 环境: centos 8.5.2111, docker 20.10.11, halo 1.4.13 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:0","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#"},{"categories":["Documentation"],"content":"安装Docker 注意 1 安装 Docker 请参照官网: https://docs.docker.com/engine/install/centos/ 2 这里用的是 root 用户, 如果是非 root 用户, 下面的命令前面要加 sudo 可以先升级一下 yum yum update 安装 yum install -y yum-utils yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce docker-ce-cli containerd.io 如果需要卸载 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 启动 systemctl start docker # 其他命令 systemctl restart docker # 重启 systemctl stop docker # 停止 systemctl status docker # 查看状态 测试 docker run hello-world # 看到以下信息代表安装成功 [root@centos ~]# docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 2db29710123e: Pull complete Digest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. ... ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:1","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#安装docker"},{"categories":["Documentation"],"content":"安装Docker 注意 1 安装 Docker 请参照官网: https://docs.docker.com/engine/install/centos/ 2 这里用的是 root 用户, 如果是非 root 用户, 下面的命令前面要加 sudo 可以先升级一下 yum yum update 安装 yum install -y yum-utils yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce docker-ce-cli containerd.io 如果需要卸载 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 启动 systemctl start docker # 其他命令 systemctl restart docker # 重启 systemctl stop docker # 停止 systemctl status docker # 查看状态 测试 docker run hello-world # 看到以下信息代表安装成功 [root@centos ~]# docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 2db29710123e: Pull complete Digest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. ... ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:1","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#安装"},{"categories":["Documentation"],"content":"安装Docker 注意 1 安装 Docker 请参照官网: https://docs.docker.com/engine/install/centos/ 2 这里用的是 root 用户, 如果是非 root 用户, 下面的命令前面要加 sudo 可以先升级一下 yum yum update 安装 yum install -y yum-utils yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce docker-ce-cli containerd.io 如果需要卸载 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 启动 systemctl start docker # 其他命令 systemctl restart docker # 重启 systemctl stop docker # 停止 systemctl status docker # 查看状态 测试 docker run hello-world # 看到以下信息代表安装成功 [root@centos ~]# docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 2db29710123e: Pull complete Digest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. ... ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:1","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#启动"},{"categories":["Documentation"],"content":"安装Docker 注意 1 安装 Docker 请参照官网: https://docs.docker.com/engine/install/centos/ 2 这里用的是 root 用户, 如果是非 root 用户, 下面的命令前面要加 sudo 可以先升级一下 yum yum update 安装 yum install -y yum-utils yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce docker-ce-cli containerd.io 如果需要卸载 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 启动 systemctl start docker # 其他命令 systemctl restart docker # 重启 systemctl stop docker # 停止 systemctl status docker # 查看状态 测试 docker run hello-world # 看到以下信息代表安装成功 [root@centos ~]# docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 2db29710123e: Pull complete Digest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. ... ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:1","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#测试"},{"categories":["Documentation"],"content":"安装 halo 官方文档: https://docs.halo.run/getting-started/install/docker Halo 在 Docker Hub 上发布的镜像为 halohub/halo: https://hub.docker.com/r/halohub/halo 创建工作目录 查看什么是工作目录 mkdir ~/.halo 拉取 Halo 镜像 docker pull halohub/halo:1.4.13 查看最新版本镜像: https://hub.docker.com/r/halohub/halo, 官方推荐使用具体版本号的镜像，但也提供了 latest 标签的镜像，它始终是最新的。 创建容器 docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.13 -it: 开启输入功能并连接伪终端 -d: 后台运行容器 --name: 为容器指定一个名称 -p: 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置 -v: 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改 --restart: 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器 打开网站 在终端输入指令查看 ip地址 ifconfig 打开 http://ip:8090 即可看到安装引导界面 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:2","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#安装-halo"},{"categories":["Documentation"],"content":"安装 halo 官方文档: https://docs.halo.run/getting-started/install/docker Halo 在 Docker Hub 上发布的镜像为 halohub/halo: https://hub.docker.com/r/halohub/halo 创建工作目录 查看什么是工作目录 mkdir ~/.halo 拉取 Halo 镜像 docker pull halohub/halo:1.4.13 查看最新版本镜像: https://hub.docker.com/r/halohub/halo, 官方推荐使用具体版本号的镜像，但也提供了 latest 标签的镜像，它始终是最新的。 创建容器 docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.13 -it: 开启输入功能并连接伪终端 -d: 后台运行容器 --name: 为容器指定一个名称 -p: 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置 -v: 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改 --restart: 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器 打开网站 在终端输入指令查看 ip地址 ifconfig 打开 http://ip:8090 即可看到安装引导界面 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:2","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#创建工作目录"},{"categories":["Documentation"],"content":"安装 halo 官方文档: https://docs.halo.run/getting-started/install/docker Halo 在 Docker Hub 上发布的镜像为 halohub/halo: https://hub.docker.com/r/halohub/halo 创建工作目录 查看什么是工作目录 mkdir ~/.halo 拉取 Halo 镜像 docker pull halohub/halo:1.4.13 查看最新版本镜像: https://hub.docker.com/r/halohub/halo, 官方推荐使用具体版本号的镜像，但也提供了 latest 标签的镜像，它始终是最新的。 创建容器 docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.13 -it: 开启输入功能并连接伪终端 -d: 后台运行容器 --name: 为容器指定一个名称 -p: 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置 -v: 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改 --restart: 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器 打开网站 在终端输入指令查看 ip地址 ifconfig 打开 http://ip:8090 即可看到安装引导界面 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:2","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#拉取-halo-镜像"},{"categories":["Documentation"],"content":"安装 halo 官方文档: https://docs.halo.run/getting-started/install/docker Halo 在 Docker Hub 上发布的镜像为 halohub/halo: https://hub.docker.com/r/halohub/halo 创建工作目录 查看什么是工作目录 mkdir ~/.halo 拉取 Halo 镜像 docker pull halohub/halo:1.4.13 查看最新版本镜像: https://hub.docker.com/r/halohub/halo, 官方推荐使用具体版本号的镜像，但也提供了 latest 标签的镜像，它始终是最新的。 创建容器 docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.13 -it: 开启输入功能并连接伪终端 -d: 后台运行容器 --name: 为容器指定一个名称 -p: 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置 -v: 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改 --restart: 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器 打开网站 在终端输入指令查看 ip地址 ifconfig 打开 http://ip:8090 即可看到安装引导界面 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:2","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#创建容器"},{"categories":["Documentation"],"content":"安装 halo 官方文档: https://docs.halo.run/getting-started/install/docker Halo 在 Docker Hub 上发布的镜像为 halohub/halo: https://hub.docker.com/r/halohub/halo 创建工作目录 查看什么是工作目录 mkdir ~/.halo 拉取 Halo 镜像 docker pull halohub/halo:1.4.13 查看最新版本镜像: https://hub.docker.com/r/halohub/halo, 官方推荐使用具体版本号的镜像，但也提供了 latest 标签的镜像，它始终是最新的。 创建容器 docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.13 -it: 开启输入功能并连接伪终端 -d: 后台运行容器 --name: 为容器指定一个名称 -p: 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置 -v: 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改 --restart: 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器 打开网站 在终端输入指令查看 ip地址 ifconfig 打开 http://ip:8090 即可看到安装引导界面 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:2","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#打开网站"},{"categories":["Documentation"],"content":"博客后台 设置 打开网站后进入设置页面, 配置完成后点击安装, 如下图 提示 后台地址: http://192.168.31.220:8090/admin/index.html#/dashboard 进入登录页面, 输入用户密码点击登录 下面就是 Halo Dashboard , 博客的后台 点击上图右上角三个按钮中的第一个, 就可以查看博客首页 主题 查看主题在下图中的 外观 - 主题 点击上图中的安装按钮出现下面弹出框, 这里选择使用远程下载来安装主题 安装好后如下图, 点击启用, 再点击设置就可以设置主题了 去探索更多吧, 可以从写一篇文章开始! ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:3","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#博客后台"},{"categories":["Documentation"],"content":"博客后台 设置 打开网站后进入设置页面, 配置完成后点击安装, 如下图 提示 后台地址: http://192.168.31.220:8090/admin/index.html#/dashboard 进入登录页面, 输入用户密码点击登录 下面就是 Halo Dashboard , 博客的后台 点击上图右上角三个按钮中的第一个, 就可以查看博客首页 主题 查看主题在下图中的 外观 - 主题 点击上图中的安装按钮出现下面弹出框, 这里选择使用远程下载来安装主题 安装好后如下图, 点击启用, 再点击设置就可以设置主题了 去探索更多吧, 可以从写一篇文章开始! ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:3","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#设置"},{"categories":["Documentation"],"content":"博客后台 设置 打开网站后进入设置页面, 配置完成后点击安装, 如下图 提示 后台地址: http://192.168.31.220:8090/admin/index.html#/dashboard 进入登录页面, 输入用户密码点击登录 下面就是 Halo Dashboard , 博客的后台 点击上图右上角三个按钮中的第一个, 就可以查看博客首页 主题 查看主题在下图中的 外观 - 主题 点击上图中的安装按钮出现下面弹出框, 这里选择使用远程下载来安装主题 安装好后如下图, 点击启用, 再点击设置就可以设置主题了 去探索更多吧, 可以从写一篇文章开始! ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:3","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#主题"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#部署"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#安装-nginx"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#安装目录"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#配置证书"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#申请证书"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#上传至服务器"},{"categories":["Documentation"],"content":"部署 这里部署使用的是云服务器, 系统是Ubuntu18.04 安装 Nginx su root apt install nginx 安装后测试一下: 如果是云服务器, 要先到控制台打开安全组中的80端口, 然后在浏览器中输入服务器网址, 出现Nginx的欢迎页面代表已经安装成功 安装目录 使用apt安装的Nginx的目录使用编译安装的目录不同, 下面为apt安装Nginx的目录 /usr/sbin/nginx： 主程序 /usr/share/nginx： 存放静态文件 /etc/nginx： 存放配置文件 /var/log/nginx： 存放日志 /var/www/: 存放项目或站点 /etc/nginx/conf.d: 配置也可以放到这个目录 配置证书 申请证书 到购买服务器的厂商申请, 在搜索框输入 SSL证书 进行搜索, 根据指导操作 上传至服务器 上传证书后, 把证书压缩文件解压, 里面有多种服务器的证书, 找到其中存放 Nginx证书 的目录, 把证书移动到 Nginx 的安装目录下 # 新建一个存放证书的目录, 可以存放多个证书 mkdir /etc/nginx/certs # 新建存放主域名证书的目录 mkdir /etc/nginx/certs/main # 进入 Nginx证书目录 cd Nginx证书目录 # 移动到Nginx安装目录下 mv ./* /etc/nginx/certs/main 新建配置 Ubuntu 中, 使用 apt 安装的 Nginx, 主配置文件是 /etc/nginx/nginx.conf, 这个文件一般用来配置公用的功能和不常修改的功能, 一般不在这个地方进行具体的配置, 为了不让越来越多的配置导致项目混乱, 会使用目录管理配置, 配置目录有两个: /etc/nginx/sites-available: 默认有一个配置模板文件default, 文件中也描述了怎么使用自己创建的配置文件, 如果需要添加配置, 先在这个目录下新建一个名为 xxx 的配置文件, 然后到 /etc/nginx/sites-enabled 目录下使用 ln -s /etc/nginx/sites-available/xxx 添加软链接, 如果不想使用配置, 直接删除软链接即可, 文件名后缀可以使用 .conf, 也可以不用后缀 /etc/nginx/conf.d: 使用方法是在此目录下直接创建一个配置文件, 只不过文件名后缀必须为 .conf cd /etc/nginx/sites-available # 一般不使用 default 这个文件, 先备份了, 然后删除软连接 mv defualt ./defualt.back rm /etc/nginx/sites-enabled/defualt 下面以配置主域名为例, 使用的配置目录为 /etc/nginx/sites-available # 先添加一个名为 xxx.com 的文件 vim xxx.com # 添加下面内容 upstream halo { # 负载均衡, 官方文档是这样写的, 个人网站很少用到 server 127.0.0.1:8090; } server { # 用来把http请求转为https请求, 注: 每个子域名都要配置 listen 80; server_name xxx.com www.xxx.com; client_max_body_size 1024m; rewrite ^(.*) https://$server_name$1 permanent; } server { listen 443 ssl; ssl on; server_name xxx.com www.xxx.com; ssl_certificate /etc/nginx/certs/main/scsxxx_www.xxx.com_server.crt; ssl_certificate_key /etc/nginx/certs/main/scsxxx_www.xxx.com_server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://halo; # 反向代理 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } # 保存退出后创建软链接 cd /etc/nginx/sites-enabled ln -s /etc/nginx/sites-available/xxx.com # 可以先测试一下配置文件, 如果报错就根据报错修改 nginx -t # 重新加载Nginx systemctl reload nginx # 或 nginx -s reload # 然后就可以到浏览器打开 xxx.com 了 ","date":"2021-11-19","objectID":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/:0:4","series":null,"tags":["halo","建站","docker","centos"],"title":"使用文档 - 使用Halo搭建个人博客网站","uri":"/4.%E4%BD%BF%E7%94%A8halo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/#新建配置"},{"categories":["Documentation"],"content":"ubuntu18.04中安装和使用虚拟环境 ","date":"2021-11-17","objectID":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/:0:0","series":null,"tags":["ubuntu","虚拟环境"],"title":"使用文档 - Ubuntu18.04配置虚拟环境","uri":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#"},{"categories":["Documentation"],"content":"1 安装virtualenv 测试有没有安装 pip3 注意 ubuntu18.04 移除了 python2.7 , 这里使用 pip3 下面的操作都是在普通用户下 pip3 list 如果提示没有装, 先安装 pip sudo apt install python3-pip 使用 pip3 安装 virtualenv pip3 install virtualenv -i https://pypi.douban.com/simple 提示 这里使用的是豆瓣源, 可以加速下载: -i https://pypi.douban.com/simple ","date":"2021-11-17","objectID":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/:0:1","series":null,"tags":["ubuntu","虚拟环境"],"title":"使用文档 - Ubuntu18.04配置虚拟环境","uri":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#1-安装virtualenv"},{"categories":["Documentation"],"content":"2 安装virtualenvwrapper virtualenvwrapper 是虚拟环境管理工具 pip3 install virtualenvwrapper -i https://pypi.douban.com/simple 安装完成后还不能使用, 按照以下方式配置 ","date":"2021-11-17","objectID":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["ubuntu","虚拟环境"],"title":"使用文档 - Ubuntu18.04配置虚拟环境","uri":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#2-安装virtualenvwrapper"},{"categories":["Documentation"],"content":"3 配置 创建目录用来存放创建的虚拟环境 mkdir ~/.virtualenvs 查看 virtualenvwrapper.sh 所在目录 type virtualenvwrapper.sh # 上面搜索不到就用下面指令 sudo find / -name virtualenvwrapper.sh 打开 .bashrc 文件, 如果是在图形系统下操作可以使用 gedit 打开, 这里使用 vim vim ~/.bashrc 参照官方文档配置 .bashrc 文件，把以下代码放到 ~/.bashrc 文件最后面 # 就是把 virtualenvwrapper.sh 所在的目录添加到 .bashrc 中 export WORKON_HOME=$HOME/.virtualenvs VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export PATH=$PATH:/home/wz/.local/bin source /home/wz/.local/bin/virtualenvwrapper.sh 如果使用的是root用户 export WORKON_HOME=$HOME/.virtualenvs VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 # export PROJECT_HOME=$HOME/Devel source /usr/local/bin/virtualenvwrapper.sh # 注意: 使用root用户配置的虚拟环境, 别的用户是不能使用的, 需要到用户目录下的.bashrc中再把上面的代码粘贴进去, 然后刷新 保存退出后, 执行下面命令 source ~/.bashrc # 如果出现, 表示配置成功 virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/premkproject virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/postmkproject virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/initialize virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/premkvirtualenv virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/postmkvirtualenv virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/prermvirtualenv virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/postrmvirtualenv virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/predeactivate virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/postdeactivate virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/preactivate virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/postactivate virtualenvwrapper.user_scripts creating /home/wz/.virtualenvs/get_env_details ","date":"2021-11-17","objectID":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/:0:3","series":null,"tags":["ubuntu","虚拟环境"],"title":"使用文档 - Ubuntu18.04配置虚拟环境","uri":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#3-配置"},{"categories":["Documentation"],"content":"4 常用命令 列出所有虚拟环境 workon 创建新的虚拟环境, 创建后自动进入虚拟环境 mkvirtualenv 虚拟环境名 退出虚拟环境 deactivate 再次进入虚拟环境 workon 虚拟环境名 删除虚拟环境 rmvirtualenv 虚拟环境名 注意 当进入虚拟环境后, 不能删除所在的虚拟环境, 要先退出 ","date":"2021-11-17","objectID":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/:0:4","series":null,"tags":["ubuntu","虚拟环境"],"title":"使用文档 - Ubuntu18.04配置虚拟环境","uri":"/2.ubuntu18.04%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#4-常用命令"},{"categories":["Documentation"],"content":"把图片存到gitee上, 作为图片仓库 ","date":"2021-11-17","objectID":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/:0:0","series":null,"tags":["gitee","图片仓库","建站"],"title":"使用文档 - 使用gitee作为图片仓库","uri":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/#"},{"categories":["Documentation"],"content":"1 在gitee新建仓库 打开 https://gitee.com/ , 创建一个仓库 ","date":"2021-11-17","objectID":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/:0:1","series":null,"tags":["gitee","图片仓库","建站"],"title":"使用文档 - 使用gitee作为图片仓库","uri":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/#1-在gitee新建仓库"},{"categories":["Documentation"],"content":"2 克隆到本地 git clone https://gitee.com/willrealize/images.git ","date":"2021-11-17","objectID":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/:0:2","series":null,"tags":["gitee","图片仓库","建站"],"title":"使用文档 - 使用gitee作为图片仓库","uri":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/#2-克隆到本地"},{"categories":["Documentation"],"content":"3 推送 # 把图片复制到本地仓库, 推送到gitee git add . git commit -m \"添加图片\" git push ","date":"2021-11-17","objectID":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/:0:3","series":null,"tags":["gitee","图片仓库","建站"],"title":"使用文档 - 使用gitee作为图片仓库","uri":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/#3-推送"},{"categories":["Documentation"],"content":"4 使用图片 下面是gitee上面的图片地址, 不能直接使用: https://gitee.com/willrealize/images/blob/master/hugo_images/skill/gitalk08.png 把blob修改为raw就可以使用了: https://gitee.com/willrealize/images/raw/master/hugo_images/skill/gitalk08.png 地址为下面格式: https://gitee.com/用户名/仓库名/raw/master/目录名/图片.图片格式 ","date":"2021-11-17","objectID":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/:0:4","series":null,"tags":["gitee","图片仓库","建站"],"title":"使用文档 - 使用gitee作为图片仓库","uri":"/5.%E4%BD%BF%E7%94%A8gitee%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/#4-使用图片"},{"categories":["documentation"],"content":"使用github pages访问网页的速度并不理想, 决定使用云服务器来搭建个人网站 ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:0","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#"},{"categories":["documentation"],"content":"准备工作 系统: 阿里云服务器 ubuntu 18.04 工具: xshell 思路: 1. 把本地的public目录推送到云服务器中创建的仓库hugo.git中, hugo.git只存提交信息, 静态资源会存放在hugo目录中, 2. 使用Nginx访问静态资源, 当用户访问网站时, 先经过 Nginx, Nginx 把hugo目录下的静态资源返回给用户 示意图\"\r示意图\r ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:1","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#准备工作"},{"categories":["documentation"],"content":"连接服务器 使用 xshell 或者 cmd 连接到云服务器, 如果使用 cmd # 如果未创建用户, 默认为 root 用户 ssh root@服务器ip # 如果已经创建了用户 ssh 用户名@服务器ip ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:2","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#连接服务器"},{"categories":["documentation"],"content":"检查是否安装 git git version # 如果没安装 sudo apt install git ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:3","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#检查是否安装-git"},{"categories":["documentation"],"content":"新建用户 # 使用root用户创建新用户 su root # 新建用户 adduser hugo # 添加root权限 vim /etc/sudoers # 在root ALL=(ALL:ALL) ALL下添加一行 hugo ALL=(ALL:ALL) ALL # 输入 x! 退出 关于用户的其他指令, 这里暂时不用 # 设置用户密码, 如果是普通用户可以用来修改密码 passwd 用户名 # 删除用户 sudo userdel -r 用户名 ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:4","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#新建用户"},{"categories":["documentation"],"content":"创建\"裸仓库\" # 使用hugo用户 su hugo # 进入hugo用户目录下 cd /home/hugo # 创建\"裸仓库\" git init --bare hugo.git # 创建用来存放push内容的目录 mkdir hugo 注意 不要使用root用户, 否则新建目录或文件时, 权限属于root用户, 还要分配目录的拥有者: chown -R hugo:hugo hugo.git, 否则push时会出现权限问题, 导致推送不成功, 使用命令 ll 可以看到目录属于哪个用户 执行 git init –bare hugo.git 会生成一个名为hugo.git的\"裸仓库\", 所谓的\"裸仓库\"是没有工作区的, 只会记录 git 提交的历史信息, git log一下是可以看到各个版本信息的, 但是没办法进行版本回退或者切换分支的操作, 但是有一个好处是可以通过添加 hooks 钩子, 然后在同级目录下新建一个目录 hugo 用来存放项目源码, 也就是说将 git 仓库与项目源码分离 如果不想在hugo的用户目录下存放项目, 可以在你想放的位置新建目录, 然后执行: chown -R username:username 目录的绝对路径 ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:5","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#创建裸仓库"},{"categories":["documentation"],"content":"配置钩子 post-receive 钩子在整个过程完结以后运行, 可以用来更新其他系统服务或者通知用户 vim /home/hugo/hugo.git/hooks/post-receive 把下面代码复制到里面 #!/bin/sh git --work-tree=/home/hugo/hugo --git-dir=/home/hugo/hugo.git checkout -f 配置权限 chmod +x /home/hugo/hugo.git/hooks/post-receive ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:6","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#配置钩子"},{"categories":["documentation"],"content":"配置Nginx 安装Nginx sudo apt update sudo apt install nginx 修改Nginx默认的配置文件 vim /etc/nginx/sites-available/default # 把 root /var/www/html 改成 /home/hugo/hugo 重启服务 service nginx reload service nginx restart # 使用普通账号启动或重载系统服务, 会提示需要输入密码, 根据提示输入密码即可 关于Nginx的其他指令, 这里暂时不用 # 删除除了配置文件以外的所有文件 sudo apt remove nginx nginx-common # 删除所有与nginx有关的东西, 包括配置文件。 sudo apt purge nginx nginx-common # 在上面命令结束后执行, 主要是删除与Nginx有关的且不再被使用的依赖包 sudo apt autoremove # 删除两个主要的包。 sudo apt remove nginx-full nginx-common # 重启nginx, 重启失败, 说明已成功卸载nginx sudo service nginx restart ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:7","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#配置nginx"},{"categories":["documentation"],"content":"建立连接 道理跟连接 GitHub 一样 先配置SSH公钥, 在本地电脑执行下面命令, 会在用户目录下生成一个 .ssh 的目录, 打开 id_rsa.pub 并复制内容 ssh-keygen -t RSA -C \"邮箱地址\" 在服务器中创建 .ssh 目录, 再创建文件 authorized_keys 用来存放公钥 # 此时所在的目录是 /home/hugo mkdir .ssh touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys # 打开文件, 把 id_rsa.pub 里面的公钥复制到里面 vim .ssh/authorized_keys ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:8","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#建立连接"},{"categories":["documentation"],"content":"推送 如何配置站点和生成public目录就不多说了 在mysite下执行 hugo后, 把 public目录推送到服务器中的 hugo.git 仓库里面 cd public git init git add . git commit -m '使用云服务器创建个人网站' # 如果没有设置用户和邮箱, 根据提示设置 git remote add origin hugo@服务器ip:/home/hugo/hugo.git # Linux用户名@服务器地址(或ip):仓库绝对路径 git push -u origin master # 提示输入密码, 输入 hugo 用户的密码 在浏览器中输入你的域名( 如果没有购买域名, 就输入服务器IP地址)就能查看到网站了 ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:9","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#推送"},{"categories":["documentation"],"content":"附 初级篇 使用 xftp 把 public 目录传送到服务器上, 修改/etc/nginx/sites-available/default, 把 root /var/www/html 改成 public 目录的绝对路径, 重载服务器: systemctl reload nginx或nginx -s reload, 然后在浏览器中输入服务器ip地址访问 ","date":"2019-11-25","objectID":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/:0:10","series":[],"tags":["hugo","建站"],"title":"Hugo文档 - 7. 使用云服务器搭建个人网站","uri":"/7.%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/#附"},{"categories":["Documentation"],"content":"使用Gitalk作为博客网站的评论系统 ","date":"2019-11-18","objectID":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","series":null,"tags":["gitalk","建站"],"title":"Hugo文档 - 6. 使用Gitalk给网站增加评论功能","uri":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/#"},{"categories":["Documentation"],"content":"创建新应用 打开 https://github.com/settings/applications/new , 根据下图填写 填好之后点击Register application进入下图中的页面, 我们需要下图中两个参数, 如果没有 Client secret , 按照下图新建一个 创建好后如下图 注意 立即把 Client secret 拷贝下来, 不然就看不到了 如果你需要, 也可以给应用添加一个图标 如果想修改应用, 修改以后点击 Update application ","date":"2019-11-18","objectID":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/:0:1","series":null,"tags":["gitalk","建站"],"title":"Hugo文档 - 6. 使用Gitalk给网站增加评论功能","uri":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/#创建新应用"},{"categories":["Documentation"],"content":"配置评论功能 打开 config.toml , 找到下图中评论系统设置, enable 设置为 true 再找到下图中 Gitalk 评论系统设置, enable 设置为 true 参数解释: owner: 是你 GitHub 的用户名 repo: 是存放评论的仓库名, 需要自己新建一个, 名字随便取 clientId: 上面所创建应用的 Client ID clientSecret: 上面所创建应用的 Client secret Gitalk官方文档: https://github.com/gitalk/gitalk 注意 Client secrets 下面可以有很多 Client secret , 只有新创建的时候能看到 Client secret 的值, 使用新建的 ","date":"2019-11-18","objectID":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/:0:2","series":null,"tags":["gitalk","建站"],"title":"Hugo文档 - 6. 使用Gitalk给网站增加评论功能","uri":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/#配置评论功能"},{"categories":["Documentation"],"content":"使用 根据上面所有步骤配置好以后, 启动本地服务 # hugo server 启动的是 development 环境, 评论功能不会在 development 环境下启用, 所以使用下面指令 hugo server -e production 打开本地网站, 点击某篇文章, 翻到评论区可以看到下图, 代表已经设置好了 注意 这时点击 使用 GitHub 登录 按钮会跳转到 https://willrealize.github.io/ , 而此时远程的网站中还没有设置评论功能, 需要先把本地新增的功能推送到 GitHub 生成静态文件并推送到 GitHub # 在站点目录下 hugo # 进入public目录, 推送到GitHub cd public git add . git commit -m \"增加评论功能\" git push 推送完成后, 等待一分钟, 打开 https://willrealize.github.io/, 随便点击一篇文章, 翻到评论区, 就会出现上一张图片的情况, 这时点击 使用 GitHub 登录 按钮就会跳到下图中的授权页面 点击 Authorize willrealize 按钮进行授权, 授权后就可以使用评论功能了 ","date":"2019-11-18","objectID":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/:0:3","series":null,"tags":["gitalk","建站"],"title":"Hugo文档 - 6. 使用Gitalk给网站增加评论功能","uri":"/6.gitalk%E7%9A%84%E4%BD%BF%E7%94%A8/#使用"},{"categories":["Documentation"],"content":"Hugo 提供了多个内置的 Shortcodes , 以方便作者保持 Markdown 内容的整洁. ","date":"2019-03-17","objectID":"/5.shortcodes/:0:0","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#"},{"categories":["Documentation"],"content":"内置shortcodes Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"https://pic.imgdb.cn/item/629a49d0094754312954f801.png\" title=\"Hugo\" \u003e}} 呈现的输出效果如下: Hugo 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"https://pic.imgdb.cn/item/629a49d0094754312954f801.png\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eHugo\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2019-03-17","objectID":"/5.shortcodes/:0:1","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#内置shortcodes"},{"categories":["Documentation"],"content":"内置shortcodes Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. figure figure 的文档 一个 figure 示例: {{}} 呈现的输出效果如下: Hugo 输出的 HTML 看起来像这样: Hugo highlight highlight 的文档 一个 highlight 示例: {{}} {{ .Title }} {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} {{}} 呈现的输出效果如下: {{ .Title }} {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} ","date":"2019-03-17","objectID":"/5.shortcodes/:0:1","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#figure"},{"categories":["Documentation"],"content":"内置shortcodes Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. figure figure 的文档 一个 figure 示例: {{}} 呈现的输出效果如下: Hugo 输出的 HTML 看起来像这样: Hugo highlight highlight 的文档 一个 highlight 示例: {{}} {{ .Title }} {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} {{}} 呈现的输出效果如下: {{ .Title }} {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} ","date":"2019-03-17","objectID":"/5.shortcodes/:0:1","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#highlight"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.webp\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.webp\" src_l=\"/images/lighthouse-large.webp\" \u003e}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\r admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r\r一个 注意 横幅\r\r 摘要\r\r一个 摘要 横幅\r\r 信息\r\r一个 信息 横幅\r\r 技巧\r\r一个 技巧 横幅\r\r 成功\r\r一个 成功 横幅\r\r 问题\r\r一个 问题 横幅\r\r 警告\r\r一个 警告 横幅\r\r 失败\r\r一个 失败 横幅\r\r 危险\r\r一个 危险 横幅\r\r Bug\r\r一个 Bug 横幅\r\r 示例\r\r一个 示例 横幅\r\r 引用\r\r一个 引用 横幅\r\r admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip\r\r一个 技巧 横幅\r\r music music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.webp\" \u003e}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#扩展shortcodes"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#link"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#image"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#admonition"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#music"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#自定义音乐-url"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#音乐平台-url-的自动识别"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#自定义音乐平台-类型和-id"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#其它参数"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#bilibili"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#typeit"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#简单内容"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#id-2 class="},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#代码内容"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#分组内容"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#friend"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#showcase"},{"categories":["Documentation"],"content":"扩展shortcodes link link shortcode 是 Markdown 链接语法的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{}} 或者 {{}} {{}} 或者 {{}} {{}} 或者 {{}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{}} 或者 {{}} 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持 本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\radmonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\radmonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 一个 admonition 示例: {{}} 一个 **技巧** 横幅 {{}} 或者 {{}} 一个 **技巧** 横幅 {{}} 呈现的输出效果如下: This is a tip\r一个 技巧 横幅\rmusic music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{}} 呈现的输出效果如下: 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{}} 或者 {{}} 呈现的输出效果如下: 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV i","date":"2019-03-17","objectID":"/5.shortcodes/:0:2","series":null,"tags":["hugo","shortcodes"],"title":"Hugo文档 - 5. Shortcodes","uri":"/5.shortcodes/#math"},{"categories":["Documentation"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意\r\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 DoIt 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. \r\r 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r\r 将此页保存为书签, 以备将来参考!\r\r ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:0","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#"},{"categories":["Documentation"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID\r\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e \r\r ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:1","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#1-标题"},{"categories":["Documentation"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:2","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#2-注释"},{"categories":["Documentation"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:3","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#3-水平线"},{"categories":["Documentation"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:4","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#4-段落"},{"categories":["Documentation"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:5","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#5-内联-html-元素"},{"categories":["Documentation"],"content":"6 强调 加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e 斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e 删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e 组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:6","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#6-强调"},{"categories":["Documentation"],"content":"6 强调 加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: 渲染为粗体 斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: 渲染为斜体 删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: 这段文本带有删除线. 组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:6","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#加粗"},{"categories":["Documentation"],"content":"6 强调 加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: 渲染为粗体 斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: 渲染为斜体 删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: 这段文本带有删除线. 组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:6","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#斜体"},{"categories":["Documentation"],"content":"6 强调 加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: 渲染为粗体 斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: 渲染为斜体 删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: 这段文本带有删除线. 组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:6","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#删除线"},{"categories":["Documentation"],"content":"6 强调 加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: 渲染为粗体 斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: 渲染为斜体 删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: 这段文本带有删除线. 组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:6","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#组合"},{"categories":["Documentation"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:7","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#7-引用"},{"categories":["Documentation"],"content":"8 列表 无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e 有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧\r\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem \r\r 任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框, 请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:8","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#8-列表"},{"categories":["Documentation"],"content":"8 列表 无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 技巧\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框, 请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:8","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#无序列表"},{"categories":["Documentation"],"content":"8 列表 无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 技巧\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框, 请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:8","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#有序列表"},{"categories":["Documentation"],"content":"8 列表 无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 技巧\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框, 请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:8","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#任务列表"},{"categories":["Documentation"],"content":"9 代码 行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e 缩进代码 将几行代码缩进至少四个空格, 例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e 围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e 语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它, 只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\r\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r\r ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:9","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#9-代码"},{"categories":["Documentation"],"content":"9 代码 行内代码 用 ` 包装行内代码段. 在这个例子中, `` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, 会被包裹成 代码. 输出的 HTML 看起来像这样: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 缩进代码 将几行代码缩进至少四个空格, 例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r输出的 HTML 看起来像这样: // Some comments line 1 of code line 2 of code line 3 of code 围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: Sample text here... 语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它, 只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:9","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#行内代码"},{"categories":["Documentation"],"content":"9 代码 行内代码 用 ` 包装行内代码段. 在这个例子中, `` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, 会被包裹成 代码. 输出的 HTML 看起来像这样: 在这个例子中, 会被包裹成 代码. 缩进代码 将几行代码缩进至少四个空格, 例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r输出的 HTML 看起来像这样: // Some comments line 1 of code line 2 of code line 3 of code 围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: Sample text here... 语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它, 只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:9","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#缩进代码"},{"categories":["Documentation"],"content":"9 代码 行内代码 用 ` 包装行内代码段. 在这个例子中, `` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, 会被包裹成 代码. 输出的 HTML 看起来像这样: 在这个例子中, 会被包裹成 代码. 缩进代码 将几行代码缩进至少四个空格, 例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r输出的 HTML 看起来像这样: // Some comments line 1 of code line 2 of code line 3 of code 围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: Sample text here... 语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它, 只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:9","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#围栏代码块"},{"categories":["Documentation"],"content":"9 代码 行内代码 用 ` 包装行内代码段. 在这个例子中, `` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, 会被包裹成 代码. 输出的 HTML 看起来像这样: 在这个例子中, 会被包裹成 代码. 缩进代码 将几行代码缩进至少四个空格, 例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r输出的 HTML 看起来像这样: // Some comments line 1 of code line 2 of code line 3 of code 围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: Sample text here... 语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它, 只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:9","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#语法高亮"},{"categories":["Documentation"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐\r\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. \r\r ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:10","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#10-表格"},{"categories":["Documentation"],"content":"11 链接 基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上, 没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e 添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e 定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意\r\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r\r ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:11","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#links"},{"categories":["Documentation"],"content":"11 链接 基本链接 [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上, 没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: https://assemble.io contact@revolunet.com Assemble 添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage 输出的 HTML 看起来像这样: Upstage 定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 Content for chapter one. ## Chapter 2 Content for chapter one. ## Chapter 3 Content for chapter one. 注意\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:11","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#基本链接"},{"categories":["Documentation"],"content":"11 链接 基本链接 [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上, 没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: https://assemble.io contact@revolunet.com Assemble 添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage 输出的 HTML 看起来像这样: Upstage 定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 Content for chapter one. ## Chapter 2 Content for chapter one. ## Chapter 3 Content for chapter one. 注意\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:11","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#添加一个标题"},{"categories":["Documentation"],"content":"11 链接 基本链接 [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上, 没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: https://assemble.io contact@revolunet.com Assemble 添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上, 会有一行提示): Upstage 输出的 HTML 看起来像这样: Upstage 定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 Content for chapter one. ## Chapter 2 Content for chapter one. ## Chapter 3 Content for chapter one. 注意\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:11","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#定位标记"},{"categories":["Documentation"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:12","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#12-脚注"},{"categories":["Documentation"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://pic.imgdb.cn/item/629a49d0094754312954f81f.png) 或者: ![Alt text](https://pic.imgdb.cn/item/629a49e7094754312955183e.png \"The Stormtroopocat\") The StormtroopocatAlt text \"\rThe Stormtroopocat\r 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \"\rThe Dojocat\r 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://pic.imgdb.cn/item/629a49c8094754312954ec8e.jpg \"The Dojocat\" 技巧\r\rDoIt 主题提供了一个包含更多功能的 图片的 shortcode.\r\r 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-03-17","objectID":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:13","series":null,"tags":["hugo","markdown"],"title":"Hugo文档 - 4. Markdown基本语法","uri":"/4.markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#13-图片"},{"categories":["Documentation"],"content":"模板文件的配置和头部参数的解释 ","date":"2019-03-11","objectID":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/:0:0","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 3. 模板文件的配置","uri":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/#"},{"categories":["Documentation"],"content":"创建文件的命令 首先从创建文件的命令说起 # 使用命令生成文件 hugo new posts/filename.md 执行上面命令, 会使用 archetypes/default.md 模板进行创建文件 ","date":"2019-03-11","objectID":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/:0:1","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 3. 模板文件的配置","uri":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/#创建文件的命令"},{"categories":["Documentation"],"content":"模板 初始模板 title: 文章标题, 显示在主页的 date: 文章创建日期 draft: 是否为草稿 官方做法: 当使用命令创建的时候, 文件为草稿, 就是 draft: true, 执行 hugo server 开启服务, 打开本地网站后, 是看不到新写的文章的, 需要执行 hugo server -D 或 hugo server --buildDrafts 才能看到, 写好文章后再修改为 false, 然后生成静态网页发布 注意 如果不修改为 false , 把执行 hugo 命令生成的 public 目录部署到 GitHub上, 打开 https://willrealize.github.io/ 是看不到这篇文章的 当然, 模板可以修改! 我的模板 参照官方文档: https://hugodoit.pages.dev/zh-cn/theme-documentation-content/ \u003c!--more--\u003e: 摘要分隔符, 摘要分隔符之前的内容将用作该文章的摘要 authors: 作者, 可以有多个, 如果要配置多个作者, 在 mysite/data 下创建 authors 目录, 目录下面创建每个作者的配置文件 lastmod: 最后修改时间, 当写完或再次修改文章时, 修改一下这个参数的值 draft: 我是设置为 false , 这样就可以直接使用 hugo server 开启服务, 如果不想发布, 则改为 true categories: 分类功能, 想把文章放在哪个分类, 就把分类名写在后边 tags: 标签功能, 想把文章想打上什么标签, 就把标签名写在后边 toc: 是用来配置文章页面目录的, 还有子参数: auto: 是用来控制目录是否自动折叠, 默认设置为 false 不自动折叠, 如果目录太长了, 可以配置为 true enable: 默认是打开的, 使用目录功能就设置为 true, 不想使用就设置为 false, 暂时不用 keepStatic: 不保持使用文章前面的静态目录就设置为 false, 这样目录就会显示在右边, 暂时不用 comment: 评论功能, 默认是打开的, 有些页面不想设置评论功能可以设置为 false 关闭 lightgallery: 画廊功能, 必须与图片语法配合使用: {{\u003c image src=“图片路径” caption=“图片标题” width=“宽” height=“高” \u003e}} featuredImage: 显示在文章最上方和主页的特色图片 当然还有很多别的参数, 可以查看上面的官方文档(在 3 前置参数 中), 计划以后会添加一些别的参数, 比如: # 这三个是一起使用的, 用来配置文章所属系列的series:[]series_weight:1seriesNavigation:true ","date":"2019-03-11","objectID":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/:0:2","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 3. 模板文件的配置","uri":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/#模板"},{"categories":["Documentation"],"content":"模板 初始模板 title: 文章标题, 显示在主页的 date: 文章创建日期 draft: 是否为草稿 官方做法: 当使用命令创建的时候, 文件为草稿, 就是 draft: true, 执行 hugo server 开启服务, 打开本地网站后, 是看不到新写的文章的, 需要执行 hugo server -D 或 hugo server --buildDrafts 才能看到, 写好文章后再修改为 false, 然后生成静态网页发布 注意 如果不修改为 false , 把执行 hugo 命令生成的 public 目录部署到 GitHub上, 打开 https://willrealize.github.io/ 是看不到这篇文章的 当然, 模板可以修改! 我的模板 参照官方文档: https://hugodoit.pages.dev/zh-cn/theme-documentation-content/ : 摘要分隔符, 摘要分隔符之前的内容将用作该文章的摘要 authors: 作者, 可以有多个, 如果要配置多个作者, 在 mysite/data 下创建 authors 目录, 目录下面创建每个作者的配置文件 lastmod: 最后修改时间, 当写完或再次修改文章时, 修改一下这个参数的值 draft: 我是设置为 false , 这样就可以直接使用 hugo server 开启服务, 如果不想发布, 则改为 true categories: 分类功能, 想把文章放在哪个分类, 就把分类名写在后边 tags: 标签功能, 想把文章想打上什么标签, 就把标签名写在后边 toc: 是用来配置文章页面目录的, 还有子参数: auto: 是用来控制目录是否自动折叠, 默认设置为 false 不自动折叠, 如果目录太长了, 可以配置为 true enable: 默认是打开的, 使用目录功能就设置为 true, 不想使用就设置为 false, 暂时不用 keepStatic: 不保持使用文章前面的静态目录就设置为 false, 这样目录就会显示在右边, 暂时不用 comment: 评论功能, 默认是打开的, 有些页面不想设置评论功能可以设置为 false 关闭 lightgallery: 画廊功能, 必须与图片语法配合使用: {{}} featuredImage: 显示在文章最上方和主页的特色图片 当然还有很多别的参数, 可以查看上面的官方文档(在 3 前置参数 中), 计划以后会添加一些别的参数, 比如: # 这三个是一起使用的, 用来配置文章所属系列的series:[]series_weight:1seriesNavigation:true ","date":"2019-03-11","objectID":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/:0:2","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 3. 模板文件的配置","uri":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/#初始模板"},{"categories":["Documentation"],"content":"模板 初始模板 title: 文章标题, 显示在主页的 date: 文章创建日期 draft: 是否为草稿 官方做法: 当使用命令创建的时候, 文件为草稿, 就是 draft: true, 执行 hugo server 开启服务, 打开本地网站后, 是看不到新写的文章的, 需要执行 hugo server -D 或 hugo server --buildDrafts 才能看到, 写好文章后再修改为 false, 然后生成静态网页发布 注意 如果不修改为 false , 把执行 hugo 命令生成的 public 目录部署到 GitHub上, 打开 https://willrealize.github.io/ 是看不到这篇文章的 当然, 模板可以修改! 我的模板 参照官方文档: https://hugodoit.pages.dev/zh-cn/theme-documentation-content/ : 摘要分隔符, 摘要分隔符之前的内容将用作该文章的摘要 authors: 作者, 可以有多个, 如果要配置多个作者, 在 mysite/data 下创建 authors 目录, 目录下面创建每个作者的配置文件 lastmod: 最后修改时间, 当写完或再次修改文章时, 修改一下这个参数的值 draft: 我是设置为 false , 这样就可以直接使用 hugo server 开启服务, 如果不想发布, 则改为 true categories: 分类功能, 想把文章放在哪个分类, 就把分类名写在后边 tags: 标签功能, 想把文章想打上什么标签, 就把标签名写在后边 toc: 是用来配置文章页面目录的, 还有子参数: auto: 是用来控制目录是否自动折叠, 默认设置为 false 不自动折叠, 如果目录太长了, 可以配置为 true enable: 默认是打开的, 使用目录功能就设置为 true, 不想使用就设置为 false, 暂时不用 keepStatic: 不保持使用文章前面的静态目录就设置为 false, 这样目录就会显示在右边, 暂时不用 comment: 评论功能, 默认是打开的, 有些页面不想设置评论功能可以设置为 false 关闭 lightgallery: 画廊功能, 必须与图片语法配合使用: {{}} featuredImage: 显示在文章最上方和主页的特色图片 当然还有很多别的参数, 可以查看上面的官方文档(在 3 前置参数 中), 计划以后会添加一些别的参数, 比如: # 这三个是一起使用的, 用来配置文章所属系列的series:[]series_weight:1seriesNavigation:true ","date":"2019-03-11","objectID":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/:0:2","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 3. 模板文件的配置","uri":"/3.%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/#我的模板"},{"categories":["Documentation"],"content":"新申请的github账号, 使用公钥与windows建立连接, 把public目录推送到远程仓库 ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:0","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#"},{"categories":["Documentation"],"content":"1 创建仓库 先在Git hub上新建仓库 进入GitHub, 点击右上角图标, 新建仓库 填写仓库名, 必须以 用户名.github.io 这种格式, 且必须公开 点击确认后创建成功 进入public目录并初始化 git init 把public提交到本地仓库 git add . git commit -m \"new site\" ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:1","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#1-创建仓库"},{"categories":["Documentation"],"content":"1 创建仓库 先在Git hub上新建仓库 进入GitHub, 点击右上角图标, 新建仓库 填写仓库名, 必须以 用户名.github.io 这种格式, 且必须公开 点击确认后创建成功 进入public目录并初始化 git init 把public提交到本地仓库 git add . git commit -m \"new site\" ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:1","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#先在git-hub上新建仓库"},{"categories":["Documentation"],"content":"1 创建仓库 先在Git hub上新建仓库 进入GitHub, 点击右上角图标, 新建仓库 填写仓库名, 必须以 用户名.github.io 这种格式, 且必须公开 点击确认后创建成功 进入public目录并初始化 git init 把public提交到本地仓库 git add . git commit -m \"new site\" ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:1","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#进入public目录并初始化"},{"categories":["Documentation"],"content":"2 生成秘钥 执行下面指令后连续确认, 直到生成图案 ssh-keygen -t rsa -C \"13215686668@qq.com\" 在C盘用户目录下找到.ssh目录, 可以看到里面生成了一个秘钥一个公钥, 秘钥不用管, 把公钥里面的内容拷贝下来 ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:2","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#2-生成秘钥"},{"categories":["Documentation"],"content":"3 把公钥放到git hub上 进入GitHub, 点击右上角图标, 点击settings 再点击左边选项: SSH and GPG keys 点击 New SSH key 出现新的页面, Title随便写, Key就是用户目录下的公钥, 打开公钥文件, 把内容全部复制过来 点击 Add SSH key 创建完成 ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#3-把公钥放到git-hub上"},{"categories":["Documentation"],"content":"4 建立连接 打开git bash进入public目录下, 用 ssh -T git@github.com , 测试是否能够连接成功, 如果使用码云: ssh -T git@gitee.com 本地仓库关联远程仓库: git remote add origin 远程仓库的地址, 指令在建立远程仓库成功时可以看到 这里选择SSH方式 git remote add origin git@github.com:willrealize/willrealize.github.io.git 关联了远程仓库之后, 我们可以把本地的仓库的内容推上去, 第一次推送要加 -u, 以后就可以直接使用 git push , 出现下面的内容, 则本地仓库的内容已经推到git hub上了 git push -u origin master 等待一分钟, 打开 https://willrealize.github.io/ , 就可以看到博客了 ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:4","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#4-建立连接"},{"categories":["Documentation"],"content":"5 碰到的问题 如果上传到GitHub, 隔一段时间打开还没有刷新网站, 要查看代码提交页面, 如下图, 如果不是对号(√)是错号(×), 说明提交的某处有问题, GitHub不会帮你更新到最新提交的页面, 要点击错号查看错误, 一般有错误报告, 跟着报告定位问题, 解决问题后重新生成 public 目录提交 ","date":"2019-03-11","objectID":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/:0:5","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 2. 部署个人网站到GitHub","uri":"/2.%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%88%B0github/#5-碰到的问题"},{"categories":["Documentation"],"content":"使用Win11+Hugo+GitHub, 搭建个人博客网站! ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:0","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#"},{"categories":["Documentation"],"content":"1 安装Go 打开 https://golang.google.cn/, 下载golang, 下载最新版本即可, 根据提示安装, 我的版本: 1.17.0 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:1","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#1-安装go"},{"categories":["Documentation"],"content":"2 安装Hugo 打开 https://github.com/gohugoio/hugo/releases , 下载hugo, 我的版本: hugo_0.89.2_Windows-64bit.zip 下载后, 解压, 把 hugo.exe 放到想放的目录 把目录添加到环境变量 测试: 打开 cmd , 输入 hugo version , 返回版本号 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:2","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#2-安装hugo"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#3-创建本地站点"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#创建站点"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#下载主题"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#配置configtoml"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#修改模板文件"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#创建文章"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#启动项目"},{"categories":["Documentation"],"content":"3 创建本地站点 创建站点 # 在你想要的地方创建一个目录, 打开cmd, 进入目录, 执行命令 hugo new site mysite # 创建站点成功后的目录结构 mysite archetypes content data layouts resources static themes config.toml 下载主题 # 下载主题, 这里使用的是 DoIt 主题: cd mysite/themes git clone https://github.com/HEIGE-PCloud/DoIt.git 配置config.toml 打开config.toml并删除所有内容 打开网页 https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/ 把网页中, 步骤2.3和3.1中的配置复制到config.toml中, 下面有我的配置 修改模板文件 # 打开archetypes/default.md, 修改文件头部配置参数 title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: false categories: [] 创建文章 # 进入创建的站点 mysite 目录下, 执行下面指令, 会在 content 目录下生成 posts 目录和目录里的 .md 格式文件 hugo new posts/first_post.md # posts 就是以后写博客的目录, 在生成的 .md 文件中写博客 启动项目 # 执行下面指令后, 在浏览器中打开 http://localhost:1313/ , 就可以看到创建的站点和新建的博客 hugo server hugo指令 # 在站点目录 mysite 下执行下面指令, 生成 public 目录, 如果想部署到 GitHub 上, 只需把 public 目录推送到 GitHub hugo # 还可以指定主题和所要部署的网站地址 hugo --theme=DoIt --baseUrl=\"https://willrealize.github.io/\" # 如何部署, 会在下一章讲 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:3","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#hugo指令"},{"categories":["Documentation"],"content":"4 本地调试碰到的问题 创建博客文件名不能有空格 新建博客要写内容, 不能为空, 否则启动不了服务 执行 hugo server , 打开网站, 不显示博客, 需要把文件头部 draft 的值修改为 false 修改博客文件名或增加文件后, 然后查看网页里面博客所在的分类, 文件名没有及时刷新, 重启一下服务就行了 如果想使用分类, 在 default.md 中头部添加一行: categories: [] , 如果想使用标签, 也是一样: tags: [] hugo server 的默认运行环境是 development, 而部署到 GitHub 的网站默认运行环境是 production.由于本地 development 环境的限制, 评论系统 , CDN 和 fingerprint 不会在 development 环境下启用. 可以使用 hugo server -e production 命令来开启这些功能 不要随意改动博客文件名: 执行 hugo 命令的时候会在 public目录下重新生成博客目录, 而不是覆盖之前的, 这样会造成空间浪费, 修改文件名的时候, 可以清空 public 目录重新生成 在部署好了网站后发现有两个问题: 1 当打开文章详情页的时候浏览器最底下有一行可以左右滑动的滚动条, 当鼠标下拉的时候就会消失. 2 右下角没有回到顶部的按钮. 问题已解决: 把 themes\\DoIt\\exampleSite\\resources\\_gen 文件夹拷贝到 mysite\\resources 下面, 如果已经存在, 就覆盖掉 ","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:4","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#4-本地调试碰到的问题"},{"categories":["Documentation"],"content":"附: 我的配置 baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 # defaultContentLanguage = \"en\" defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"个人博客\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"DoIt\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 2 # [[menu.main]] # identifier = \"tags\" # pre = \"\" # post = \"\" # name = \"标签\" # url = \"/tags/\" # title = \"\" # weight = 3 [[menu.main]] identifier = \"about\" pre = \"\" post = \"\" name = \"关于\" url = \"/about/\" title = \"\" weight = 4 # github配置 [[menu.main]] identifier = \"github\" pre = \"\u003ci class='fab fa-github fa-fw'\u003e\u003c/i\u003e\" post = \"\" name = \"\" url = \"https://baidu.com\" title = \"我的GitHub\" weight = 5 [params] # DoIt 主题版本 version = \"0.2.X\" # 网站名称 title = \"个人博客\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"black\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径, 仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 开启 PWA 支持 enablePWA = false # 版权信息 # license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"DoIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"https://github.com/favicon.ico\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\", \"fuse\") type = \"fuse\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"输入文章标题或文章内一级标签\" # 最大结果数目 maxResultLength = 2 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [params.search.fuse] # https://fusejs.io/api/options.html isCaseSensitive = false minMatchCharLength = 2 findAllMatches = false location = 0 threshold = 0.3 distance = 100 ignoreLocation = false useExtendedSearch = false ignoreFieldNorm = false # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 主题切换模式 # 主题切换模式 (\"switch\", \"select\") themeChangeMode = \"switch\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"个人博客\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = 'Powered by \u003ca href=\"https://gohugo.io/\" target=\"_blank\"\u003eHugo\u003c/a\u003e. Theme based on \u003ca href=\"https://github.com/HEIGE-PCloud/DoIt\" target=\"_blank\"\u003eDoIt\u003c/a\u003e!' # 是否显示 Hugo 和主题信息 hugo = false # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息, 仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) # license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 最近更新文章设置 [params.section.recentlyUpdated] enable = false rss = false days = 30 maxCount = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = false # Gravatar 邮箱, 用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL # 将你的头像文件放置于 static 或者 asset","date":"2019-03-04","objectID":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/:0:5","series":null,"tags":["hugo","建站"],"title":"Hugo文档 - 1. 创建个人博客网站","uri":"/1.%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#附-我的配置"},{"categories":null,"content":" \r\r \r\r\r\r","date":"2019-01-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"About Me","uri":"/about/#"}]